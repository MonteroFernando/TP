# -*- coding: utf-8 -*-
"""03_TrabajoPractico4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qinCtHo5RJOFRSDq0AUtCIIIqfe_zcMF

# **Trabajo Práctico 4 - Pilares de POO**

### Ejercicio 1

Dado el siguiente Diagrama de clases, indique cual es la clase base y cual la derivada. Liste los atributos y métodos de la clase derivada.  
  
![imagen clases A y B](https://i.ibb.co/ZT0NKbF/clases-TP4-E1.png)
"""
#Resolucion Ejercicio 1
# La clase A es la clase base y la clase B es la derivada
#Atributo de la clase B
#*Atributo3
#Metodo de la clase B
#Metodo3

"""
### Ejercicio 2

Dada la clase `Personaje` vista en el TP2, defina una subclase `Caballero` que implemente un método 
`usar_espada` similar al método `golpear` en el cual en lugar de restar la fuerza propia a la vida 
del enemigo, reste el doble de la fuerza propia. Las demás restricciones se mantienen, si la vida 
propia es 0 mostrar el mensaje "Game over", si se resta toda la vida del enemigo mostrar el mensaje 
"Has matado un enemigo." y añadir la experiencia al personaje.
"""
from ej5tp2 import Personaje

class Caballero(Personaje):
    ''' Clase derivada de Personaje, que representa a un caballero'''

    def usar_espada(self,nombre):
        '''Actualiza la vida del enemigo (ingresado como parametro), tomando el valor del golpe introducido como parametro'''
        if self.vida==0:
            print(f'{self.nombre}: Game Over')
        else:
            nombre.recibir_golpe(self.fuerza*2)
        if nombre.vida==0:
            print(f'{self.nombre}: Has matado a un enemigo')
            self.ganar_exp(1)


"""
### Ejercicio 3

Dada la clase `Personaje` vista en el TP2, defina una subclase `Mago` que además de los atributos 
que ya están implementados, añada el atributo `mana` inicializado con un valor de 100 
(llamar al `__init__()` de la superclase).  
Luego implemente un método `lanzar_hechizo`, similar al método `golpear`, 
el cual resta el doble de la fuerza a la vida del enemigo. 
Por cada uso de este método se debe restar el valor 10 del `mana`. 
Si el `mana` es menor a 10 mostrar un mensaje que diga "No tienes mana suficiente para lanzar el hechizo". 
Las demás restricciones se mantienen al igual que el ejercicio anterior.  
  
También implementar un método `reponer_mana` que reciba por parámetro un valor y 
sume ese valor al `mana` del `Mago`. El `mana` no puede ser menor a 0 o mayor a 100.
"""
class Mago(Personaje):
    '''Sub Clase de Personaje que representa a un mago'''
    def __init__(self,nombre,mana=100):
        '''Constructor de la subclase'''
        super().__init__(nombre)
        self.mana=mana

    def lanzar_echizo(self,nombre):
        
    
"""
### Ejercicio 4

Tome la clase `Mago` y convierta el atributo `mana` en un atributo no público. 
Modifique los métodos que haga falta para mantener igual la implementación.
"""