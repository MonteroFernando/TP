# -*- coding: utf-8 -*-
"""03_TrabajoPractico3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iMg5_JWmbAFiL80Rj-TzRAiHov6OATIJ

# **Trabajo Práctico 3 - Clasificación de atributos y métodos**

### Ejercicio 1

Defina una clase que represente un caballo, la clase debe tener un constructor que reciba el nombre y la edad. Incluya un atributo de clase `especie` con el nombre de la especie.  
  
Instancie un caballo y acceda al atributo de clase `especie` a través de la instancia y luego directamente a través de la clase.
"""
#Resolucion del Ejercicio 1
class Caballo:
    '''Clase que representa a un caballo'''
    especie='Equus caballus'
    def __init__(self, nombre, edad=None):
        '''Constructir de la clase'''
        self.nombre=nombre
        self.edad=edad
#Ejemplo    
tornado=Caballo('tornado',5)
print(Caballo.especie)
print(tornado.especie)
"""
### Ejercicio 2

Escribir una clase que permita representar canciones. La clase debe tener los atributos `titulo`, `artista`, `duracion` (en segundos) y `genero`. Además, la clase debe tener como atributo de clase un tipo contenedor que almacene los distintos géneros como cadenas, llamado `generos`. El contenedor puede ser del tipo que Ud. desee (list, dict, etc.).  
  
La clase debe implementar los siguientes métodos:  
* Un constructor que reciba todos los atributos como parámetros. Si el género no está en el contenedor de géneros, debe agregarlo usando el método de clase `agregar_genero`.  
* Un metodo `mostrar_info` que muestre por pantalla los datos de la canción.  
* Un método de clase `agregar_genero` (mencionado antes) que reciba el nombre del género como parámetro y lo agregue a la lista.  
  
Con la clase definida, completar los siguientes incisos consecutivamente:  
1. Agregar los géneros 'rock&roll', 'clasica', 'pop' y 'metal' directamente desde la clase, sin instanciar un objeto.  
2. Instanciar una canción del género 'rock&roll' y luego mostrar su información.  
3. Instanciar una canción con un nuevo género, por ejemplo: 'electronica', y mostrar su información.  
4. Mostrar todos los géneros que esten en la lista de géneros. Puede crear un método de clase para completar el inciso o acceder directamente.
"""
#Resolucion del Ejercicio 2
class Canciones:
    '''Clase que representa a canciones'''
    generos=[]
    
    def __init__(self, titulo, artista, duracion=0, genero=None):
        self.titulo=titulo
        self.artista=artista
        self.duracion=duracion
        self.genero=genero
        if self.genero not in self.generos:
            self.agregar_genero(genero)

    @classmethod
    def agregar_genero(cls,genero):
        '''Ingresa un nuevo genero a la lista'''
        cls.generos.append(genero)

    def mostrar_info(self):
        print(f'* - Titulo: {self.titulo}\n* - Artista: {self.artista}\n* - Duración: {self.duracion} seg.\n* - Genero: {self.genero}')

    @classmethod
    def mostar_generos(cls):
        '''Mustra un detalle de los generos cargados en la clase'''
        print('Generos cargados en canciones:')
        for i,genero in enumerate(cls.generos):
            print(f'{i+1}: {genero}')
#Ejemplo
Canciones.agregar_genero('rock&roll')
Canciones.agregar_genero('clasica')
Canciones.agregar_genero('pop')
Canciones.agregar_genero('metal')

cancion1=Canciones('Green River','Creedence Clearwater Revival',156,'rock&roll')
cancion1.mostrar_info()
cancion2=Canciones('My Love','Route 94',190,'Deep House')
cancion2.mostrar_info()

Canciones.mostar_generos()

"""
### Ejercicio 3

Definir una clase que represente una receta de cocina. Una receta debe tener un nombre, una lista de ingredientes (con sus respectivas cantidades), una lista ordenada de los pasos de preparación.  
  
La clase debe permitir crear una receta nueva, mostrar solo los ingredientes y mostrar solo los pasos de preparación. También debe llevar la cuenta de la cantidad de recetas creadas (usar un atributo de clase). Recordar aumentar la cantidad de recetas cuando se cree una nueva instancia.  
  
Instanciar una clase y mostrar sus ingredientes y pasos de preparación. Mostrar la cantidad de recetas creadas.
"""
#Resolucion del Ejercicio 3
class Receta:
    '''Clase que representa un listado de recetas'''
    recetas_creadas = 0

    def __init__(self, nombre, ingredientes, pasos):
        '''Constructor de la calse, recibe como parametro el nombre, un diccionario con los ingredientes, y una lista con los pasos a realizar'''
        self.nombre = nombre
        self.ingredientes = ingredientes
        self.pasos = pasos
        Receta.recetas_creadas += 1

    def mostrar_ingredientes(self):
        '''Modulo que muestra los ingredientes de la receta'''
        print(f'Ingredientes de la receta {self.nombre}')
        for ingrediente, cantidad in self.ingredientes.items():
            print(f'{ingrediente}:{cantidad}')

    def mostrar_pasos(self):
        '''Instancia que muestra los pasos enumerados'''
        print("Pasos de preparación de la receta '{}'".format(self.nombre))
        for i, paso in enumerate(self.pasos):
            print(f'{i+1} - {paso}')

#Ejemplo
ingredientes={'manteca':'2 cucharadas','harina': '2 cucharadas', 'leche': '2 tazas','sal': 'a gusto', 'pimienta':'a gusto','nuez mozcada':'a gusto'}
instrucciones=['En una cacerola a fuego medio derretir la manteca', 'Agregar la harina a la manteca derretira y revolver hasta formar una pasta suave', 
                 'Agregar la leche lentamente e ir revolviendo para no generar grumos, y seguir cocinando hasta que tenga la consistencia deseada', 'salpimentar a gusto', 'Agregar tambien nuez moscada (opcional)'] 
                

receta1 = Receta('Salsa blanca (Bechamel)', ingredientes,instrucciones)

ingredientes={'palta':'2 maduros','cebolla': '1/4 picado fino', 'tomate': '1 picado',
              'cilantro': '1/4 taza picado','jugo de limon':'1 limon','sal':'a gusto',
              'pimienta':'a gusto','chile jalapeño':'a gusto'}
instrucciones=['Corta las paltas por la mitad, retira la semilla y saca la pulpa con una cuchara en un tazón.',
                    'Agrega la cebolla, tomate y cilantro al tazón con la palta.', 
                    'Exprime el jugo de limón sobre los ingredientes en el tazón y agrega sal y pimienta al gusto.',
                    'Usa un tenedor para aplastar los ingredientes y mezclar todo hasta obtener la consistencia deseada. Puedes hacerlo más o menos suave según tu preferencia.',
                    'Si quieres un toque de picante, agrega el chile jalapeño picado y mezcla bien.'] 
                
print("Cantidad de recetas creadas: {}".format(Receta.recetas_creadas))

receta2 = Receta('Guacamole', ingredientes,instrucciones)

lrecetas=[receta1,receta2]
for i in range(len(lrecetas)):
   print(f'Receta {i+1}: {lrecetas[i].nombre}')
   lrecetas[i].mostrar_ingredientes()
   lrecetas[i].mostrar_pasos()





"""

### Ejercicio 4

Definir una clase `Rectangulo` que tenga como atributos las longitudes de sus lados (base y altura).
Debe permitir crear un rectángulo y devolver su área y perímetro.  
  
Implementar el método `__str__` para esta clase de manera que devuelva la información de sus lados 
(se debe poder usar `print(rectangulo)`).  
  
Instanciar un objeto y mostrarlo usando `print`.  
  
Usar la función `str()` para castear el rectángulo a `str` y almacenar el resultado en una variable.  
  
Usar los métodos de área y perímetro.
"""
#Resolución
class Rectangulo:
    '''Clase que representa un rectangulo'''
    def __init__(self,base,altura):
        '''Contructor para la clse rectangulo recibe como parametros base y altura'''
        self.base=base
        self.altura=altura

    def __str__(self):
        '''metodo str para devolver base y altura de la clase'''
        return f'Base: {self.base}, Altura: {self.altura}'
    
    def area(self):
        '''Metodo que calcula el area'''
        return self.base*self.altura
    def perimetro(self):
        '''Metodo que calcula el perimetro'''
        return self.base*2 + self.altura*2
    
#Ejemplo
rectangulo1=Rectangulo(15,30)
print(rectangulo1)

detalle_rectangulo=str(rectangulo1)

print(f'El rectangulo tiene: {detalle_rectangulo}, su area es: {rectangulo1.area()} y su perimetro es: {rectangulo1.perimetro()}')



"""
### Ejercicio 5

Definir una clase `Evento` la cual pueda representar un evento en el calendario. 
El evento debe tener un nombre o descripción, una fecha, una hora y una duración en minutos.  
 
No hay restricción para representar la fecha y la hora. 
Se recomienda usar el módulo `datetime` de la librería estándar, pero se pueden usar simples cadenas o enteros.  
  
Implemente el método especial `__str__` con el formato que Ud. considere para representar 
un objeto `Evento` como una cadena.  
  
Implemente el método especial `__len__` para que devuelva la duración del evento.  
  
Instanciar un objeto de la clase `Evento` y mostrarlo por pantalla con `print()`, 
luego muestre por pantalla el "tamaño" con la función `len()`.
"""
#Resolución
import datetime
import locale
#para que me imprima la fecha en español
locale.setlocale(locale.LC_ALL, 'es-ES.UTF-8')
class Evento:
    '''Clase que representa eventos de un calendario'''
    def __init__(self,nombre,descripcion,fecha,hora,duracion):
        '''Constructor que recibe datos como parametro, el formato de la fecha que recibe es dd-mm-aaaa y la hora HH:MM'''
        self.nombre=nombre
        self.descripcion=descripcion
        #En la siguiente linea concateno los datos pasados como parametros para recien poder pasarlos a la variale de la instalcia con formato de fecha
        fechayhora=fecha+' '+hora
        #Comprueba que los datos ingresado sean correctos
        try:
            self.fecha_hora=datetime.datetime.strptime(fechayhora,'%d-%m-%Y %H:%M')
        except ValueError:
            raise 'La fecha o hora ingresada no es valida debe ser de la siguiente manera:\n dd-mm-aaaa HH:MM'
        #comprueba si la duracion es positiva
        if duracion<=0:
            raise 'La dracion ingresada no puede ser igual 0 o negativa'
        self.duracion=duracion
    
    def __str__(self):
        '''Metodo especial str retorna detalles del evento'''
        #En las lineas siguientes se da un formato a la fecha, y se las pasa a una variable
        fecha_formato=self.fecha_hora.strftime('%d de %B del %Y')
        horaformato=self.fecha_hora.strftime('%H:%M')
        return f'Nombre del evento: {self.nombre}\nDetalle del evento: {self.descripcion}\nFecha del evento: {fecha_formato} a horas {horaformato}\nDuracion: {self.duracion}'
    
    def __len__(self):
        '''Metodo especial len, retorna la rucaion del evento en minutos'''
        return self.duracion
#Ejemplo
evento1=Evento('Reunion Genrencial','Revisar compras pendientes de entrega','27-02-2023','08:00',60)

print(evento1)
print(f'La duracion del evento es de: {len(evento1)}')


